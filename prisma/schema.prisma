generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  email             String             @unique
  password          String
  isAdmin           Boolean            @default(false)
  verified          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  orders            Order[]
  products          Product[]
  verificationCodes VerificationCode[]
}

model VerificationCode {
  id        String   @id @default(uuid()) @db.Uuid
  code      String
  type      String
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  name        String
  description String?
  price       Float       @default(0)
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  user        User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Order {
  id                          String        @id @default(uuid()) @db.Uuid
  userId                      String        @db.Uuid
  totalAmount                 Float
  status                      OrderStatus   @default(PENDING)
  paymentStatus               PaymentStatus @default(PENDING)
  paymentGatewayTransactionId String?
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  user                        User          @relation(fields: [userId], references: [id])
  items                       OrderItem[]

  @@index([userId])
}

model OrderItem {
  id           String   @id @default(uuid()) @db.Uuid
  orderId      String   @db.Uuid
  productId    String   @db.Uuid
  quantity     Int
  priceAtOrder Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
